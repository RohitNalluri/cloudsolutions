---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploying a three-tier EC2 application with an elastic load balancer'

Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: 'Name'
          Value: 'MyVPC'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'MyInternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref 'Vpc'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: 'Name'
          Value: 'MyPublicSubnet1'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: 'Name'
          Value: 'MyPublicSubnet2'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: '10.0.3.0/24'
      MapPublicIpOnLaunch: false
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: 'Name'
          Value: 'MyPrivateSubnet1'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: '10.0.4.0/24'
      MapPublicIpOnLaunch: false
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: 'Name'
          Value: 'MyPrivateSubnet2'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: 'Name'
          Value: 'MyPublicRouteTable'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: 'AttachGateway'
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: 'Name'
          Value: 'MyPrivateRouteTable'

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NatGateway'

    NatEip:
    Type: 'AWS::EC2::EIP'
    Properties:
    Domain: 'vpc'
    Tags:
    - Key: 'Name'
    Value: 'MyNatEip'

    NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
    AllocationId: !GetAtt 'NatEip.AllocationId'
    SubnetId: !Ref 'PublicSubnet1'
    Tags:
    - Key: 'Name'
    Value: 'MyNatGateway'

    EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
    GroupDescription: 'Security group for EC2 instances'
    VpcId: !Ref 'Vpc'

    ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
    GroupDescription: 'Security group for ELB'
    VpcId: !Ref 'Vpc'
    SecurityGroupIngress:
    - IpProtocol: tcp
    FromPort: 80
    ToPort: 80
    CidrIp: '0.0.0.0/0'

    EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
    ImageId: 'ami-0c94855ba95c71c99'
    InstanceType: 't2.micro'
    KeyName: 'MyKeyPair'
    NetworkInterfaces:
    - AssociatePublicIpAddress: true
    DeviceIndex: '0'
    GroupSet:
    - !Ref 'EC2SecurityGroup'
    SubnetId: !Ref 'PublicSubnet1'

    EC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
    ImageId: 'ami-0c94855ba95c71c99'
    InstanceType: 't2.micro'
    KeyName: 'MyKeyPair'
    NetworkInterfaces:
    - AssociatePublicIpAddress: true
    DeviceIndex: '0'
    GroupSet:
    - !Ref 'EC2SecurityGroup'
    SubnetId: !Ref 'PublicSubnet2'

    LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
    Subnets:
    - !Ref 'PublicSubnet1'
    - !Ref 'PublicSubnet2'
    SecurityGroups:
    - !Ref 'ELBSecurityGroup'
    Tags:
    - Key: 'Name'
    Value: 'MyLoadBalancer'

    TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
    Port: 80
    Protocol: HTTP
    VpcId: !Ref 'Vpc'
    Tags:
    - Key: 'Name'
    Value: 'MyTargetGroup'

    Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
    LoadBalancerArn: !Ref 'LoadBalancer'
    Protocol: HTTP
    Port: 80
    DefaultActions:
    - Type: forward
    TargetGroupArn: !Ref 'TargetGroup'

    Outputs:
    LoadBalancerDNSName:
    Description: 'Load Balancer DNS Name'
    Value: !GetAtt 'LoadBalancer.DNSName'
